var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼: fqpabi8 \n 個人倉儲: https://github.com/mdecp2024/hw-41323242-042 \n 個人網站: https://mdecp2024.github.io/hw-41323242-042/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w10', 'text': '\n 題目一 \n \n 題目二 \n \n \n \n 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"( Keywords )有關係嗎? 請實際舉例 \n Ans: \n 在 Python 中，變數命名的規則包括： \n \n \n 以字母或底線開頭 ：變數名稱必須以字母（ a-z ,  A-Z ）或底線 ( _ ) 開頭，後面可以是字母、數字或底線。例如： var1 ,  _var ,  my_var  都是合法的。 \n \n \n 不能使用關鍵字（Keywords） ：Python 有一些保留字，稱為關鍵字，這些字是有特殊含義的，不能用作變數名稱。例如： if ,  else ,  while ,  import  等。 \n \n \n 舉例： \n \n 合法變數名稱： my_var ,  var1 ,  _temp \n 不合法變數名稱： 1var （不能以數字開頭）、 if （是關鍵字） \n \n \n 題目三 \n \n 在影片說明欄位及個人 w10 頁面中說明解題流程與心得 \n 第一部分：計算恆定加速度  \n 問題概述：  \n 初速度： 𝑣 𝑖 = 310 km/h v i =310km/h  \n 最終速度： 𝑣 𝑓 = 0 m/s v f =0m/s  \n 距離： 𝑑 = 1000 m d=1000m  \n 解題步驟：  \n 單位轉換： \n  將初速度從 km/h km/h 轉換為 m/s m/s，因為公式要求以 m/s m/s 計算： 𝑣 𝑖 = 310 km/h = 86.11 m/s v i =310km/h=86.11m/s 運用公式計算加速度： 使用運動學公式： 𝑣 𝑓 2 = 𝑣 𝑖 2 + 2 𝑎 𝑑 v f 2 =v i 2 +2ad 由於最終速度 𝑣 𝑓 = 0 v f =0，可以簡化為： 𝑎 = − 𝑣 𝑖 2 2 𝑑 = − ( 86.11 ) 2 2 × 1000 = − 3.70 m/s 2 a= 2d −v i 2 = 2×1000 −(86.11) 2 =−3.70m/s 2  \n 結論：  \n 所需的恆定加速度是 − 3.70 m/s 2 −3.70m/s 2 ，表示物體在減速。  \n 第二部分： 計算人口增長時間  \n 問題概述：  \n 初始人口： \n  𝑃 0 = 100 P 0 =100 目標人口： 𝑃 target = 50000 P target =50000 雙倍時間： 𝑇 = 3 小時 T=3小時 \n  解題步驟： \n  運用對數增長公式： \n  使用公式： \n  𝑃 ( 𝑡 ) = 𝑃 0 × 2 𝑡 𝑇 P(t)=P 0 ×2 T t 代入目標人口，並解出時間 𝑡 t： 𝑡 = 𝑇 × log \u2061 2 ( 𝑃 target 𝑃 0 ) t=T×log 2 ( P 0 P target ) 代入數值計算： 𝑡 = 3 × log \u2061 2 ( 50000 100 ) = 3 × 11.29 = 33.87 小時 t=3×log 2 ( 100 50000 )=3×11.29=33.87小時  \n 結論： \n  人口將在約 33.87 小時後達到 50000。  \n 心得: \n  由於我對於程式的建構還不太熟悉，所以我借助gpt來幫助我完成w10 第三題兩題關於物理和微積分的程式構建；讓我最驚訝的是原來程式也能幫忙解開數學難題，而且速度快又正確。', 'tags': '', 'url': 'w10.html'}, {'title': 'w7', 'text': '', 'tags': '', 'url': 'w7.html'}, {'title': 'brython建立', 'text': '\n \n \n', 'tags': '', 'url': 'brython建立.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答: "*"字號圖形 \n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗黑 \n 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得.', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n    \xa0 \n \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w6', 'text': "#help(range)\nfor i in range(1,5):\n    print(i)\ndef print_star_pyramid(rows):\n    for i in range(rows):\n        # 打印空格\n        print(' ' * (rows - i - 1), end='')\n        # 打印星星\n        print('*' * (2 * i + 1))\n \n# 設定金字塔的行數\nrows = 5\nprint_star_pyramid(rows)\ndef print_number_pyramid(rows):\n    for i in range(rows):\n        # 打印空格\n        print(' ' * (rows - i - 1), end='')\n        # 打印數字\n        print(str(i + 1) * (2 * i + 1))\n \n         \n     *\n   ***\n  *****\n *******\n*********\n \n \n", 'tags': '', 'url': 'w6.html'}, {'title': 'w8', 'text': '\n \n from coppeliasim_zmqremoteapi_client import RemoteAPIClient\nimport time\nimport keyboard\n\n# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線\nclient = RemoteAPIClient(\'120.113.99.54\', 23000)\n# 以 getObject 方法取得場景物件\nsim = client.getObject(\'sim\')\nbox = sim.getObject(\'/box\')\n\n# 啟動模擬\nsim.startSimulation()\n\n# 設定立方體的尺寸和初始位置\ncube_size = 0.2  # 20 cm\nspacing = 0.5  # 50 cm 之間的距離（可根據需求調整）\n\n# 擺放立方體的行數和每行的數量\nrows = 5  # 從第 1 行到第 5 行\ncubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量\n\n# 在正的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = row * spacing  # 垂直方向上每行間距\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 在負的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = -row * spacing  # 負的 Y 方向\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 完成立方體的擺放\nprint("立方體已成功擺放!")\n\n# 設定主迴圈\nwhile True:\n    # 在這裡可以進行其他模擬操作\n    time.sleep(0.1)  # 確保循環不會過快\n\n    if keyboard.is_pressed(\'q\'):\n        # 可以按下 q 鍵跳出重複執行迴圈\n        break\n\n# 終止模擬\nsim.stopSimulation()\n \n 盧棱講過，偉大的人是絕不會濫用自己的優點的，他們看出自己越過別人的地方，並且意識到這一點，然而絕不會因此就不謙虛。他會這麼說是有理由的。需要考慮周詳學習python的影響及因應對策。培根講過一句值得人反覆尋思的話，尊重人民，也就會受到人民的尊重。這句話語雖然很短，但令我浮想聯翩。 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \xa0 \xa0 \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};