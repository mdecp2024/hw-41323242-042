var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼: fqpabi8 \n 個人倉儲: https://github.com/mdecp2024/hw-41323242-042 \n 個人網站: https://mdecp2024.github.io/hw-41323242-042/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w10', 'text': '\n 題目一 \n \n 題目二 \n \n \n \n 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"( Keywords )有關係嗎? 請實際舉例 \n Ans: \n 在 Python 中，變數命名的規則包括： \n \n \n 以字母或底線開頭 ：變數名稱必須以字母（ a-z ,  A-Z ）或底線 ( _ ) 開頭，後面可以是字母、數字或底線。例如： var1 ,  _var ,  my_var  都是合法的。 \n \n \n 不能使用關鍵字（Keywords） ：Python 有一些保留字，稱為關鍵字，這些字是有特殊含義的，不能用作變數名稱。例如： if ,  else ,  while ,  import  等。 \n \n \n 舉例： \n \n 合法變數名稱： my_var ,  var1 ,  _temp \n 不合法變數名稱： 1var （不能以數字開頭）、 if （是關鍵字） \n \n \n 題目三 \n \n 在影片說明欄位及個人 w10 頁面中說明解題流程與心得 \n 第一部分：計算恆定加速度 \n import math\n\ndef solve_motion(v0=None, v=None, a=None, d=None):\n    """\n    Solve for the missing variable in the motion equations given three known values.\n    \n    Parameters:\n    v0 (float): Initial velocity (m/s) or None if not known.\n    v (float): Final velocity (m/s) or None if not known.\n    a (float): Acceleration (m/s²) or None if not known.\n    d (float): Distance (m) or None if not known.\n    \n    Returns:\n    float: The value of the missing variable.\n    """\n    # If initial velocity (v0) is missing\n    if v0 is None:\n        if v is not None and a is not None and d is not None:\n            # Use equation: v0 = sqrt(v^2 - 2ad)\n            return math.sqrt(v**2 - 2 * a * d)\n        else:\n            raise ValueError("Insufficient known values to solve for initial velocity.")\n    \n    # If final velocity (v) is missing\n    elif v is None:\n        if v0 is not None and a is not None and d is not None:\n            # Use equation: v = sqrt(v0^2 + 2ad)\n            return math.sqrt(v0**2 + 2 * a * d)\n        else:\n            raise ValueError("Insufficient known values to solve for final velocity.")\n    \n    # If acceleration (a) is missing\n    elif a is None:\n        if v0 is not None and v is not None and d is not None:\n            # Use equation: a = (v^2 - v0^2) / (2 * d)\n            return (v**2 - v0**2) / (2 * d)\n        else:\n            raise ValueError("Insufficient known values to solve for acceleration.")\n    \n    # If distance (d) is missing\n    elif d is None:\n        if v0 is not None and v is not None and a is not None:\n            # Use equation: d = (v^2 - v0^2) / (2 * a)\n            return (v**2 - v0**2) / (2 * a)\n        else:\n            raise ValueError("Insufficient known values to solve for distance.")\n    \n    # If all variables are given, return a message\n    else:\n        raise ValueError("Too many known values provided. Provide exactly three known values.")\n\n# Example usage:\n# 1. Solve for acceleration when v0=310 km/h, v=0, d=1000 m\nv0_kmh = 310  # Initial velocity in km/h\nv0 = (v0_kmh * 1000) / 3600  # Convert km/h to m/s\nv = 0  # Final velocity (jet comes to a stop)\nd = 1000  # Distance in meters\n\nacceleration = solve_motion(v0=v0, v=v, d=d)\nprint(f"Required acceleration: {acceleration:.2f} m/s²")\n\n# 2. Solve for final velocity when v0 = 20 m/s, a = 2 m/s², and d = 1000 m\nv0 = 20  # m/s\na = 2  # m/s²\nd = 1000  # meters\n\nfinal_velocity = solve_motion(v0=v0, a=a, d=d)\nprint(f"Final velocity: {final_velocity:.2f} m/s")\n\n# 3. Solve for distance when v0 = 10 m/s, v = 0 m/s, and a = -3 m/s² (deceleration)\nv0 = 10  # m/s\nv = 0  # m/s\na = -3  # m/s² (deceleration)\n\ndistance = solve_motion(v0=v0, v=v, a=a)\nprint(f"Stopping distance: {distance:.2f} meters")\n \n \n 結論：  \n 所需的恆定加速度是 − 3.70 m/s 2 −3.70m/s 2 ，表示物體在減速。  \n 第二部分： 計算人口增長時間  \n \'\'\'\nUnder ideal conditions a certain bacteria population is known to double every three hours.  \nSuppose that there are initially 100 bacteria. When will the population first reach 50,000 ? \n\'\'\'\nimport math\n\n# Given values\nP0 = 100  # initial population\nP_target = 50000  # target population\nT = 3  # doubling time in hours\n\n# Calculate the time when population reaches P_target\nt = T * math.log(P_target / P0, 2)\n\nprint(f"The population will first reach {P_target} after {t:.2f} hours.")\n \n \n 結論： \n  人口將在約 33.87 小時後達到 50000。  \n 心得: \n  由於我對於程式的建構還不太熟悉，所以我借助gpt來幫助我完成w10 第三題兩題關於物理和微積分的程式構建；讓我最驚訝的是原來程式也能幫忙解開數學難題，而且速度快又正確。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w7', 'text': '', 'tags': '', 'url': 'w7.html'}, {'title': 'brython建立', 'text': '\n \n \n', 'tags': '', 'url': 'brython建立.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答: "*"字號圖形 \n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗黑 \n 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n \n 操作過程:  \n 先從個人網站開啟brython，之後再開啟chat gpt，再把問題給丟上去，讓gpt解決，讓其產生所需程式碼，可利用brython或著SciTE 編輯器去測試程式碼，其中gpt對於自己提出的問題，它所提供的程式碼與自身所想的答案有所偏差，之後需要不斷地嘗試，直到試出正確答案；得到所需程式碼後，再到Github裡的Your gists，按下 Create new gist，放入剛剛獲得的程式碼，結束後，按下raw酒可獲得網址，再把網址複製在個人brython網址後，brython網址後需加上?src=才可使網站有效，第二題以此類推。  \n 心得:  \n 這項作業操作過程其實並沒有特別複雜，只是多了Your gists這個新的操作過程，還有 ?src=gist_script_URL這串代碼，在操作期間，我認為最麻煩的是詢問chat gpt的這個步驟，因為gpt有時會給你不是正確的答案，需要自己多加詢問並加上其他附加條件才能獲得最終解答，在影片中我也是循問gpt多次才可獲得正確的答案，途中還因為問錯方向而多做了許多時間。 \n w11課堂作業 \n 課堂作業 \n n = 11 #總共的行數\nspace = "_"\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(", x, ", ", y, ")", sep="") \n 課堂作業2 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\ngs = 20\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth = 11\nheight = 11\n\n\'\'\'\nctx.lineWidth = 1\nctx.strokeStyle = \'lightgrey\'\nctx.beginPath()\n# ctx.rect(i*gs, j*gs, gs,gs)\nctx.rect(0, 0, 150, 100)\nctx.stroke()\n\'\'\'\n\nfor i in range(width):\n    for j in range(height):\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \'lightgrey\'\n        ctx.beginPath() \n        ctx.rect(i * gs, j * gs, gs, gs)\n        ctx.stroke() \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '第一題 input() print() \n 1. 你的名字和你來自哪裡 \n input("What\'s your name?")\ninput("Where are you from?") \n \n 2. cat \n 說明： print是打印的指令,如果用以下的執行出來會出現一隻小貓(brython執行會歪掉,所以有補償空格) \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___") \n \n 第二題:變數 \n 1. 你的名字 "前後" \n 說明：設定變數後,可以使用列印指令,列印出不同變數 \n first_name = "Yang"\nlast_name  = "Yong Shun"\nprint (first_name)\nprint (last_name) \n \n 2. 你的名字和喜歡的食物 \n 說明：使用input指令跳出詢問窗,再 使用回傳的數值與字串進行合併 \n name = input("What\'s your name?")\nfavorite_food = input ("What is your favorite food?")\nprint ("Hi! My name is " + name)\nprint ("My favorite food is " + favorite_food) \nprint (name + "\'s favorite food is " + favorite_food) \n \n 第三題: if判斷式 \n 1. 你要買什麼書 \n \xa0說明：使用if判斷式判斷使用者輸入之數值(文字)是否在字串當中 \n programming_books = ["Learn python", "Python for all",  "Intro to python"]\nprint (programming_books)\nwanted_book = input("Hi! What book would you like to buy?")\nprint (wanted_book)\nif wanted_book in programming_books:\n    print ("Yes, we sell it!")\nelse:\n    print ("Sorry, we don\'t sell that book") \n \n 第四題: append()和remove() \n 1. 購物清單 \n \xa0說明：使用append()進行加入接著使用remove()移除清單內無需購買之物品 \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n\nif new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n    print (shopping_list) #列印shopping_list字串\nelse:                    #反之\n    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單\n    print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n\nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n    print (shopping_list) #列印購物清單\nelse:                     #反之\n    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n    print (shopping_list) #列印購物清單 \n 第五題: index().pop()和insert() \n 菜單 \n 說明:index()用於從列表中找出某個述職的位置 \n \xa0 \xa0 \xa0 \xa0pop()用於將列標表中的元素移除(默認為最後一個) \n \xa0 \xa0 \xa0 \xa0insert用於將字串插入 \n todays_menu = ["burger", "salad", "coke"] \nside_dish_index = todays_menu.index("salad") \nprint (side_dish_index)\ntodays_menu.pop(side_dish_index) \nprint (todays_menu) \ntodays_menu.insert(side_dish_index, "fries") \nprint (todays_menu)  \n 第六題: 切片取值 \n city \n 說明： [star:end:step][起點:終點:步長] \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] \nprint (cities) \nprint (cities[1]) \nprint (cities[1:4]) \nprint (cities[1:4:2]) \nprint (cities[0:3]) \nprint (cities[:3]) \nprint (cities[2:5]) \nprint (cities[2:]) \nprint (cities[0:5:2]) \nprint (cities[::2]) \nprint (cities[4])\nprint (cities[-1]) \nprint (cities[-4:-1])\ncities[3:0:-1] \ncities[-2:-5:-1] \nprint (cities[::-1]) \n  \n 第六題: senses()、planets()、house() \n 感官 \n 說明: \n senses: 替換項目，結果：["sight", "smell", "hearing", "taste", "touch"] \n planets: 加入和插入行星，結果：["Mercury", "Mars", "Venus", "Earth", "Neptune", "Jupiter", "Uranus", "Saturn"] \n house: 刪除項目，最後刪除清單會報錯。 \n senses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint (senses)\nsenses[1] = "smell"\nprint (senses)\nsenses[3:5] = ["taste", "touch"]\nprint (senses)\nsenses[0:3:2] = ["sight", "hearing"]\nprint (senses)\nplanets = ["Mercury", "Mars", "Earth", "Neptune"]\nprint (planets)\nplanets = planets + ["Jupiter"]\nprint (planets)\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\nprint (planets)\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\nprint(planets)\nhouse = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]\nprint (house)\ndel house[1]\nprint (house)\ndel house[4:6]\nprint (house)\ndel house[::2]\nprint (house)\ndel house\nprint (house) \n 第八題: dishes()、for()\xa0 \n 朋友與他們喜歡的菜餚 \n 說明:dishes 的部分會在每個循環中列出所有菜肴 \n \xa0 \xa0 \xa0 \xa0for 迴圈應該嵌套，以便顯示每個朋友對應的最愛菜肴。 \n friends = ["Geetha", "Luca", "Daisy", "Juhan"]\ndishes  = ["sushi", "burgers", "tacos", "pizza"]\nprint ("My friends\' names are:")\nprint (friends)\nfor index in range (0,4):\n    print ("index:  " + str(index))\n    print ("friend: " + friends[index])\n    print ("Their favorite dishes are:")\nprint (dishes)\nfor index in range (0,4):\n    print ("index:  " + str(index))\n    print ("dish: " + dishes[index]) \n 第九題: \n  尋找心儀的動物 \n 說明: \n print()：顯示訊息 \n range()：生成數字範圍 \n len()：取得列表長度 \n if / else：條件判斷 \n animals = ["giraffe", "penguin", "dolphin"]\nprint (animals)\n# for each position in the list\nfor i in range (0, len(animals)):\n    print ("-- Beginning of loop --")\n    # print each element and its position\n    print ("The element in position " + str(i) + " is " + animals[i])\n    wanted_to_see = "penguin"\n    # for each position in the list\nfor i in range (0, len(animals)):\n    # if the current animal is what you really wanted to see\n    if animals[i] == wanted_to_see:\n        # print out that that\'s the animal you really wanted to see\n        print ("I saw a " + animals[i] + " and I really wanted to see it!")\n    # if the current animal is not what you really wanted to see\n    else:\n        # just print out that you saw it\n        print ("I saw a " + animals[i]) \n 第10題: \n 配件列表遍歷與條件檢查 \n 說明: for  迴圈用於遍歷列表中的每個元素，並對每個元素執行特定操作。 \n accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]\nprint (accessories)\n# for each position in the list\nfor i in range (len(accessories)):\n    #print each elements and its position\n    print ("The element "  + accessories[i] + " is in position " + str(i))\n    # for each position in the list\nfor i in range (len(accessories)): \n    # if the length of the element equals 6\n    if len(accessories[i]) == 6:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")\n        # for each position in the list\nfor i in range (len(accessories)):\n    # if the length of the element equals 6\n    if len(accessories[i]) == 6:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")\n        # defining the threshold\nn_of_characters = 6 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the length of the element is greater than the threshold\n    if len(accessories[i]) > n_of_characters:\n        # print the element, its position, and its number of characters\n        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")\n        # defining the threshold\nposition = 2 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the position of the element is less then or equal to to the threshold\n    if i <= position:\n        # print the element, its position, and its position characteristic\n        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))\n        # defining the threshold\nposition = 2 \n# for each position in the list \nfor i in range (len(accessories)):\n    # if the position of the element is greater then or equal to to the threshold\n    if i >= position:\n        # print the element, its position, and its position characteristic\n        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))  \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '兩個紅色方框重疊 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 1  # 設定線條寬度\nctx.strokeStyle = \'red\'  # 設定線條顏色為紅色\n \n# 1. 原始正方形 (左上角在 (0, 0))\nctx.beginPath()\nctx.rect(0, 0, 200, 200)  # 原始正方形的大小\nctx.stroke()\n \n# 設定變數\ncanvas_center_x = canvas.width // 2\ncanvas_center_y = canvas.height // 2\nsquare_size = 200\n \n# 2. 第二個正方形 (中心對齊)\nfirst_top_left_x = canvas_center_x - square_size // 2\nfirst_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)\nctx.stroke()\n \n# 3. 第三個正方形 (左上角在中心)\nsecond_top_left_x = canvas_center_x - square_size // 2\nsecond_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath() \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 1  # 設定線條寬度\nctx.strokeStyle = \'red\'  # 設定線條顏色為紅色\n \n# 1. 原始正方形 (左上角在 (0, 0))\nctx.beginPath()\nctx.rect(0, 0, 200, 200)  # 原始正方形的大小\nctx.stroke()\n \n# 設定變數\ncanvas_center_x = canvas.width // 2\ncanvas_center_y = canvas.height // 2\nsquare_size = 200\n \n# 2. 第二個正方形 (中心對齊)\nfirst_top_left_x = canvas_center_x - square_size // 2\nfirst_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)\nctx.stroke()\n \n# 3. 第三個正方形 (左上角在中心)\nsecond_top_left_x = canvas_center_x - square_size // 2\nsecond_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath() \n 作業13 \n from browser import html\nfrom browser import document as doc\nimport math\n  \ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n  \nctx = canvas.getContext("2d")\nctx.lineWidth = 4\n \n#混色的\nctx.globalCompositeOperation = "screem"\n \n \n#黑邊圓*2(每個畫四個邊邊)\nctx.strokeStyle = \'black\'\n#第一個圓\nctx.beginPath()\nctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "Turquoise"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "Tomato"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "SpringGreen"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "FloralWhite"\nctx.fill()\nctx.stroke()\n \n#第二個圓\nctx.beginPath()\nctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "Purple"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "OliveDrab"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "Orange"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "MediumVioletRed"\nctx.fill()\nctx.stroke()\n \n \n#紅方形*2(4個三角形)\nctx.strokeStyle = \'Purple\'\nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(60,260)\nctx.lineTo(260,260)\nctx.fillStyle = "Gold"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(260,60)\nctx.lineTo(260,260)\nctx.fillStyle = "Indigo"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(360,160)\nctx.lineTo(360,360)\nctx.fillStyle = "Cyan"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,360)\nctx.lineTo(360,360)\nctx.fillStyle = "CornflowerBlue"\nctx.fill()\nctx.stroke()\n \n  \n#重疊的小方型\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,260)\nctx.lineTo(260,260)\nctx.fillStyle = "MediumOrchid"\nctx.fill()\nctx.stroke()\n \nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(260,160)\nctx.lineTo(260,260)\nctx.fillStyle = "SlateBlue"\nctx.fill()\nctx.stroke()\n \n \n#藍斜線\nctx.strokeStyle = \'blue\'\nctx.beginPath() \nctx.moveTo(60, 60)\nctx.lineTo(260, 260)\nctx.stroke()  \n 心得: \n w13的功課上課都有教到，裡面有些程式理解過後就能加以利用，但是程式碼有些地方我並不是很了解，像是填加對角線和各區域塗色的部分，所以我利用ai來幫助我，這串程式碼才得以完成。', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '課堂作業 \n from browser import html\nfrom browser import document as doc\nimport random\n \n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。\n    返回畫布元素和它的 2D 繪圖上下文。\n    """\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]  # 獲取指定 id 的 div 元素\n    brython_div <= canvas  # 將 canvas 插入到該 div 中\n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n \n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    """\n    生成一個隨機的 RGB 顏色字符串。\n    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。\n    """\n    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)\n    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)\n    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)\n    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串\n \n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    """\n    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。\n    (cx, cy) 為圓心坐標，r 為圓的半徑。\n    """\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n \n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    """\n    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。\n    x1, y1, r1 是圓1的圓心坐標和半徑\n    x2, y2, r2 是圓2的圓心坐標和半徑\n    x3, y3, r3 是圓3的圓心坐標和半徑\n    """\n    canvas, ctx = initialize_canvas(400, 400)\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    color_dict = {}\n \n    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標\n        current_color = None \n        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標\n            # 判斷該點是否在圓1內\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            # 判斷該點是否在圓2內\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            # 判斷該點是否在圓3內\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n \n            if in_circle1 and in_circle2 and in_circle3:\n                # 如果點同時在三個圓內，則是三圓交集區域\n                if "intersection" not in color_dict:\n                    color_dict["intersection"] = random_color_generator()\n                current_color = color_dict["intersection"]\n            elif in_circle1 and in_circle2:\n                # 如果點在圓1和圓2的交集區域\n                if "circle1_circle2" not in color_dict:\n                    color_dict["circle1_circle2"] = random_color_generator()\n                current_color = color_dict["circle1_circle2"]\n            elif in_circle1 and in_circle3:\n                # 如果點在圓1和圓3的交集區域\n                if "circle1_circle3" not in color_dict:\n                    color_dict["circle1_circle3"] = random_color_generator()\n                current_color = color_dict["circle1_circle3"]\n            elif in_circle2 and in_circle3:\n                # 如果點在圓2和圓3的交集區域\n                if "circle2_circle3" not in color_dict:\n                    color_dict["circle2_circle3"] = random_color_generator()\n                current_color = color_dict["circle2_circle3"]\n            elif in_circle1:\n                # 如果點只在圓1內\n                if "circle1" not in color_dict:\n                    color_dict["circle1"] = random_color_generator()\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                # 如果點只在圓2內\n                if "circle2" not in color_dict:\n                    color_dict["circle2"] = random_color_generator()\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                # 如果點只在圓3內\n                if "circle3" not in color_dict:\n                    color_dict["circle3"] = random_color_generator()\n                current_color = color_dict["circle3"]\n            else:\n                # 如果點不在任何圓內，則是背景區域\n                current_color = "white"  # 背景色設為白色\n \n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n \n# 設定三個圓的圓心座標和半徑\nx1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100\n \n# 呼叫畫圓函式，並繪製三個圓\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)\n \n 請根據兩個圓繪圖所圍成的 區域 (目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. \n Ans \n from browser import html\nfrom browser import document as doc\nimport math\n\n# 利用 html 創建 canvas 元素\ncanvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\n\ngrid_size = 10\nctx.lineWidth = 1\n\n# HTML 表單，用於用戶輸入圓心和半徑\ndef create_input_form():\n    # 創建表單元素\n    form_div = html.DIV(id="form-div")\n    form_div <= html.H3("請輸入圓心座標和半徑:")\n    \n    # 創建輸入框和標籤\n    form_div <= html.LABEL("第一個圓心X座標: ")\n    form_div <= html.INPUT(id="circle1_center_x", value="200")  # 預設值200\n    form_div <= html.BR()\n    \n    form_div <= html.LABEL("第一個圓心Y座標: ")\n    form_div <= html.INPUT(id="circle1_center_y", value="200")  # 預設值200\n    form_div <= html.BR()\n    \n    form_div <= html.LABEL("第一個圓半徑: ")\n    form_div <= html.INPUT(id="circle1_radius", value="141.4")  # 預設值141.4\n    form_div <= html.BR()\n    \n    form_div <= html.LABEL("第二個圓心X座標: ")\n    form_div <= html.INPUT(id="circle2_center_x", value="300")  # 預設值300\n    form_div <= html.BR()\n    \n    form_div <= html.LABEL("第二個圓心Y座標: ")\n    form_div <= html.INPUT(id="circle2_center_y", value="300")  # 預設值300\n    form_div <= html.BR()\n    \n    form_div <= html.LABEL("第二個圓半徑: ")\n    form_div <= html.INPUT(id="circle2_radius", value="141.4")  # 預設值141.4\n    form_div <= html.BR()\n\n    form_div <= html.LABEL("第三個圓心X座標: ")\n    form_div <= html.INPUT(id="circle3_center_x", value="400")  # 預設值400\n    form_div <= html.BR()\n\n    form_div <= html.LABEL("第三個圓心Y座標: ")\n    form_div <= html.INPUT(id="circle3_center_y", value="400")  # 預設值400\n    form_div <= html.BR()\n\n    form_div <= html.LABEL("第三個圓半徑: ")\n    form_div <= html.INPUT(id="circle3_radius", value="141.4")  # 預設值141.4\n    form_div <= html.BR()\n    \n    # 創建提交按鈕\n    form_div <= html.BUTTON("提交", id="submit-btn")\n    \n    brython_div <= form_div\n\n# 獲取用戶輸入的圓心和半徑\ndef get_user_input():\n    circle1_center_x = float(doc["circle1_center_x"].value)\n    circle1_center_y = float(doc["circle1_center_y"].value)\n    circle1_radius = float(doc["circle1_radius"].value)\n    \n    circle2_center_x = float(doc["circle2_center_x"].value)\n    circle2_center_y = float(doc["circle2_center_y"].value)\n    circle2_radius = float(doc["circle2_radius"].value)\n    \n    circle3_center_x = float(doc["circle3_center_x"].value)\n    circle3_center_y = float(doc["circle3_center_y"].value)\n    circle3_radius = float(doc["circle3_radius"].value)\n    \n    return (circle1_center_x, circle1_center_y, circle1_radius), (circle2_center_x, circle2_center_y, circle2_radius), (circle3_center_x, circle3_center_y, circle3_radius)\n\n# 畫多個圓並填充區域\ndef draw_circles_and_fill_regions(circle1_center, circle1_radius, circle2_center, circle2_radius, circle3_center, circle3_radius):\n    # 清除畫布，防止重疊\n    ctx.clearRect(0, 0, 600, 600)\n    \n    # 繪製三個圓並填充其區域\n    ctx.strokeStyle = \'black\'\n    \n    # 第一個圓\n    ctx.fillStyle = \'green\'  # 第一個圓的填充顏色\n    ctx.beginPath()\n    ctx.arc(circle1_center[0], circle1_center[1], circle1_radius, 0, 2 * math.pi)\n    ctx.fill()  # 填充圓\n    ctx.stroke()\n\n    # 第二個圓\n    ctx.fillStyle = \'red\'  # 第二個圓的填充顏色\n    ctx.beginPath()\n    ctx.arc(circle2_center[0], circle2_center[1], circle2_radius, 0, 2 * math.pi)\n    ctx.fill()  # 填充圓\n    ctx.stroke()\n\n    # 第三個圓\n    ctx.fillStyle = \'yellow\'  # 第三個圓的填充顏色\n    ctx.beginPath()\n    ctx.arc(circle3_center[0], circle3_center[1], circle3_radius, 0, 2 * math.pi)\n    ctx.fill()  # 填充圓\n    ctx.stroke()\n\n    # 判斷點是否在第一個圓內\n    def point_in_circle1(x, y):\n        cx, cy, r = circle1_center[0], circle1_center[1], circle1_radius\n        return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2\n\n    # 判斷點是否在第二個圓內\n    def point_in_circle2(x, y):\n        cx, cy, r = circle2_center[0], circle2_center[1], circle2_radius\n        return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2\n    \n    # 判斷點是否在第三個圓內\n    def point_in_circle3(x, y):\n        cx, cy, r = circle3_center[0], circle3_center[1], circle3_radius\n        return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2\n\n    # 根據區域確定顏色\n    def get_region_color(x, y):\n        # 判斷點在哪些圓內\n        in_circle1 = point_in_circle1(x, y)\n        in_circle2 = point_in_circle2(x, y)\n        in_circle3 = point_in_circle3(x, y)\n\n        # 三個區域：\n        if in_circle1 and not in_circle2 and not in_circle3:\n            return \'green\'  # 只在第一個圓內，填充綠色\n        elif in_circle2 and not in_circle1 and not in_circle3:\n            return \'red\'  # 只在第二個圓內，填充紅色\n        elif in_circle3 and not in_circle1 and not in_circle2:\n            return \'yellow\'  # 只在第三個圓內，填充黃色\n        elif in_circle1 and in_circle2 and not in_circle3:\n            return \'blue\'  # 在兩個圓交集區域，填充藍色\n        elif in_circle1 and in_circle3 and not in_circle2:\n            return \'purple\'  # 在第一個和第三個圓交集區域，填充紫色\n        elif in_circle2 and in_circle3 and not in_circle1:\n            return \'orange\'  # 在第二個和第三個圓交集區域，填充橙色\n        elif in_circle1 and in_circle2 and in_circle3:\n            return \'brown\'  # 在三個圓交集區域，填充棕色\n        else:\n            return None  # 三個圓之外不填充\n\n    # 掃描並填充區域\n    def scan_and_draw():\n        for x in range(0, 600, grid_size):  # 遍歷畫布範圍，左到右\n            for y in range(0, 600, grid_size):  # 從上到下\n                color = get_region_color(x, y)  # 獲取當前點的區域顏色\n                if color:  # 只有當顏色不為 None 時才繪製\n                    # 繪製填充的矩形\n                    ctx.fillStyle = color\n                    ctx.fillRect(x, y, grid_size, grid_size)  # 填充一個區域的矩形，而不是小圓點\n\n    # 開始掃描並繪製顏色\n    scan_and_draw()\n\n# 創建輸入表單\ncreate_input_form()\n\n# 設置點擊提交按鈕的事件\ndef on_submit(event):\n    # 獲取用戶輸入的圓心座標和半徑\n    circle1_center, circle2_center, circle3_center = get_user_input()\n\n    # 調用函數繪製圓並填充區域\n    draw_circles_and_fill_regions(\n        circle1_center[0:2], circle1_center[2],\n        circle2_center[0:2], circle2_center[2],\n        circle3_center[0:2], circle3_center[2]\n    )\n\n# 綁定點擊提交按鈕事件\ndoc["submit-btn"].bind("click", on_submit)\n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n    \xa0 \n \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w6', 'text': "#help(range)\nfor i in range(1,5):\n    print(i)\ndef print_star_pyramid(rows):\n    for i in range(rows):\n        # 打印空格\n        print(' ' * (rows - i - 1), end='')\n        # 打印星星\n        print('*' * (2 * i + 1))\n \n# 設定金字塔的行數\nrows = 5\nprint_star_pyramid(rows)\ndef print_number_pyramid(rows):\n    for i in range(rows):\n        # 打印空格\n        print(' ' * (rows - i - 1), end='')\n        # 打印數字\n        print(str(i + 1) * (2 * i + 1))\n \n         \n     *\n   ***\n  *****\n *******\n*********\n \n", 'tags': '', 'url': 'w6.html'}, {'title': 'w8', 'text': '\n \n from coppeliasim_zmqremoteapi_client import RemoteAPIClient\nimport time\nimport keyboard\n\n# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線\nclient = RemoteAPIClient(\'120.113.99.54\', 23000)\n# 以 getObject 方法取得場景物件\nsim = client.getObject(\'sim\')\nbox = sim.getObject(\'/box\')\n\n# 啟動模擬\nsim.startSimulation()\n\n# 設定立方體的尺寸和初始位置\ncube_size = 0.2  # 20 cm\nspacing = 0.5  # 50 cm 之間的距離（可根據需求調整）\n\n# 擺放立方體的行數和每行的數量\nrows = 5  # 從第 1 行到第 5 行\ncubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量\n\n# 在正的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = row * spacing  # 垂直方向上每行間距\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 在負的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = -row * spacing  # 負的 Y 方向\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 完成立方體的擺放\nprint("立方體已成功擺放!")\n\n# 設定主迴圈\nwhile True:\n    # 在這裡可以進行其他模擬操作\n    time.sleep(0.1)  # 確保循環不會過快\n\n    if keyboard.is_pressed(\'q\'):\n        # 可以按下 q 鍵跳出重複執行迴圈\n        break\n\n# 終止模擬\nsim.stopSimulation()\n \n 盧棱講過，偉大的人是絕不會濫用自己的優點的，他們看出自己越過別人的地方，並且意識到這一點，然而絕不會因此就不謙虛。他會這麼說是有理由的。需要考慮周詳學習python的影響及因應對策。培根講過一句值得人反覆尋思的話，尊重人民，也就會受到人民的尊重。這句話語雖然很短，但令我浮想聯翩。', 'tags': '', 'url': 'w8.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \xa0 \xa0 \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};