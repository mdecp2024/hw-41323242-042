<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p><a aria-label="連結 Learn Python with Jupyter" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159" id="menur4f" rel="noreferrer noopener" target="_blank" title="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a aria-label="連結 site" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://www.learnpythonwithjupyter.com/" id="menur4h" rel="noreferrer noopener" target="_blank" title="https://www.learnpythonwithjupyter.com/">site</a>, <a aria-label="連結 ebook" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf" id="menur4j" rel="noreferrer noopener" target="_blank" title="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p>教育版帳號 microsoftonline 登入點: <a aria-label="連結 https://login.microsoftonline.com/" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://login.microsoftonline.com/" id="menur4l" rel="noreferrer noopener" target="_blank" title="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p>以 "學號@nfu.edu.tw" 登入 <a aria-label="連結 https://login.microsoftonline.com/" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://login.microsoftonline.com/" id="menur4n" rel="noreferrer noopener" target="_blank" title="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p>Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323242-042">https://github.com/mdecp2024/hw-41323242-042</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323242-042/content/index.html">https://mdecp2024.github.io/hw-41323242-042/content/index.html</a></p>
<p>其他資訊:</p>
<p><a aria-label="連結 cd2023_pj3ag4_zmq_football_4.7.7z" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://sturdy-train-97j697475pw73xqr9-8080.app.github.dev/downloads/cd2023_pj3ag4_zmq_football_4.7.7z" id="menur4t" rel="noreferrer noopener" target="_blank" title="https://sturdy-train-97j697475pw73xqr9-8080.app.github.dev/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p><a aria-label="連結 cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z" id="menur4v" rel="noreferrer noopener" target="_blank" title="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<p></p>
<h1>HW 1</h1>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w10</h3>
<p></p>
<h4>題目一</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uFqTbLf3Psw" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 41323242" width="625"></iframe></p>
<h4>題目二</h4>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="609" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/PksgwP_XaMM" title="國立虎尾科技大學機械設計工程系 - 計算機程式 題目2 41323242" width="1084"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="609" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JvWgo0h5yb0" title="題目 國立虎尾科技大學機械設計工程系 - 電腦程式題目2 41323242" width="1083"></iframe></p>
<p><span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"(</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a><span>)有關係嗎? 請實際舉例</span></p>
<h5>Ans:</h5>
<p>在 Python 中，變數命名的規則包括：</p>
<ol>
<li>
<p><strong>以字母或底線開頭</strong>：變數名稱必須以字母（<code>a-z</code>, <code>A-Z</code>）或底線 (<code>_</code>) 開頭，後面可以是字母、數字或底線。例如：<code>var1</code>, <code>_var</code>, <code>my_var</code> 都是合法的。</p>
</li>
<li>
<p><strong>不能使用關鍵字（Keywords）</strong>：Python 有一些保留字，稱為關鍵字，這些字是有特殊含義的，不能用作變數名稱。例如：<code>if</code>, <code>else</code>, <code>while</code>, <code>import</code> 等。</p>
</li>
</ol>
<h4>舉例：</h4>
<ul>
<li>合法變數名稱：<code>my_var</code>, <code>var1</code>, <code>_temp</code></li>
<li>不合法變數名稱：<code>1var</code>（不能以數字開頭）、<code>if</code>（是關鍵字）</li>
</ul>
<p></p>
<h4>題目三</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="609" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/AiNeeeImm38" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三: 41323242" width="1083"></iframe></p>
<p><span>在影片說明欄位及個人 w10 頁面中說明解題流程與心得</span></p>
<h5><span>第一部分：計算恆定加速度</span></h5>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

def solve_motion(v0=None, v=None, a=None, d=None):
    """
    Solve for the missing variable in the motion equations given three known values.
    
    Parameters:
    v0 (float): Initial velocity (m/s) or None if not known.
    v (float): Final velocity (m/s) or None if not known.
    a (float): Acceleration (m/s²) or None if not known.
    d (float): Distance (m) or None if not known.
    
    Returns:
    float: The value of the missing variable.
    """
    # If initial velocity (v0) is missing
    if v0 is None:
        if v is not None and a is not None and d is not None:
            # Use equation: v0 = sqrt(v^2 - 2ad)
            return math.sqrt(v**2 - 2 * a * d)
        else:
            raise ValueError("Insufficient known values to solve for initial velocity.")
    
    # If final velocity (v) is missing
    elif v is None:
        if v0 is not None and a is not None and d is not None:
            # Use equation: v = sqrt(v0^2 + 2ad)
            return math.sqrt(v0**2 + 2 * a * d)
        else:
            raise ValueError("Insufficient known values to solve for final velocity.")
    
    # If acceleration (a) is missing
    elif a is None:
        if v0 is not None and v is not None and d is not None:
            # Use equation: a = (v^2 - v0^2) / (2 * d)
            return (v**2 - v0**2) / (2 * d)
        else:
            raise ValueError("Insufficient known values to solve for acceleration.")
    
    # If distance (d) is missing
    elif d is None:
        if v0 is not None and v is not None and a is not None:
            # Use equation: d = (v^2 - v0^2) / (2 * a)
            return (v**2 - v0**2) / (2 * a)
        else:
            raise ValueError("Insufficient known values to solve for distance.")
    
    # If all variables are given, return a message
    else:
        raise ValueError("Too many known values provided. Provide exactly three known values.")

# Example usage:
# 1. Solve for acceleration when v0=310 km/h, v=0, d=1000 m
v0_kmh = 310  # Initial velocity in km/h
v0 = (v0_kmh * 1000) / 3600  # Convert km/h to m/s
v = 0  # Final velocity (jet comes to a stop)
d = 1000  # Distance in meters

acceleration = solve_motion(v0=v0, v=v, d=d)
print(f"Required acceleration: {acceleration:.2f} m/s²")

# 2. Solve for final velocity when v0 = 20 m/s, a = 2 m/s², and d = 1000 m
v0 = 20  # m/s
a = 2  # m/s²
d = 1000  # meters

final_velocity = solve_motion(v0=v0, a=a, d=d)
print(f"Final velocity: {final_velocity:.2f} m/s")

# 3. Solve for distance when v0 = 10 m/s, v = 0 m/s, and a = -3 m/s² (deceleration)
v0 = 10  # m/s
v = 0  # m/s
a = -3  # m/s² (deceleration)

distance = solve_motion(v0=v0, v=v, a=a)
print(f"Stopping distance: {distance:.2f} meters")
</pre>
<p><span></span></p>
<p><span>結論： </span></p>
<p><span>所需的恆定加速度是 − 3.70 m/s 2 −3.70m/s 2 ，表示物體在減速。 </span></p>
<h5><span>第二部分： 計算人口增長時間 </span></h5>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
Under ideal conditions a certain bacteria population is known to double every three hours.  
Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ? 
'''
import math

# Given values
P0 = 100  # initial population
P_target = 50000  # target population
T = 3  # doubling time in hours

# Calculate the time when population reaches P_target
t = T * math.log(P_target / P0, 2)

print(f"The population will first reach {P_target} after {t:.2f} hours.")
</pre>
<p></p>
<p><span>結論：</span></p>
<p><span> 人口將在約 33.87 小時後達到 50000。 </span></p>
<h5>心得:</h5>
<p><span> 由於我對於程式的建構還不太熟悉，所以我借助gpt來幫助我完成w10 第三題兩題關於物理和微積分的程式構建；讓我最驚訝的是原來程式也能幫忙解開數學難題，而且速度快又正確。</span></p>
<h3>w7</h3>
<h4>brython建立</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="609" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Ur3XqxQLOWw" title="brython建立" width="1133"></iframe></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="575" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GIvxbvsN8wQ" title="我已經會用簡單的python程式" width="1076"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="575" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/s5LTzsWES0o" title="上傳到個人作業倉儲" width="1076"></iframe></p><h3>w11_hw</h3>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題解答:<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/199df05fdd108a15147b4b259fc510bd/raw/8e9e3829b32bfa6b29edf8d23771511d8660a1bd/hw11-1.py">"*"字號圖形</a></p>
<p></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p>第二題解答:<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/b18adcb6a62a605c7be56b3d79eb945d/raw/91a64bbb4a60409629bf2b3546bcc28d0b97dcdf/hw11-2.py">網頁上的方格與塗黑</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="609" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IruSbTmjXhA" title="w11_hw" width="1083"></iframe></p>
<p><span>操作過程: </span></p>
<p><span>先從個人網站開啟brython，之後再開啟chat gpt，再把問題給丟上去，讓gpt解決，讓其產生所需程式碼，可利用brython或著SciTE 編輯器去測試程式碼，其中gpt對於自己提出的問題，它所提供的程式碼與自身所想的答案有所偏差，之後需要不斷地嘗試，直到試出正確答案；得到所需程式碼後，再到Github裡的Your gists，按下 Create new gist，放入剛剛獲得的程式碼，結束後，按下raw酒可獲得網址，再把網址複製在個人brython網址後，brython網址後需加上?src=才可使網站有效，第二題以此類推。 </span></p>
<p><span>心得: </span></p>
<p><span>這項作業操作過程其實並沒有特別複雜，只是多了Your gists這個新的操作過程，還有 ?src=gist_script_URL這串代碼，在操作期間，我認為最麻煩的是詢問chat gpt的這個步驟，因為gpt有時會給你不是正確的答案，需要自己多加詢問並加上其他附加條件才能獲得最終解答，在影片中我也是循問gpt多次才可獲得正確的答案，途中還因為問錯方向而多做了許多時間。</span></p>
<h3>w11課堂作業</h3>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/77b76c53938ea6ba810690fb17a03a42/raw/e7ecefe564817b41c093d96f18cc2e09f6aae0ee/w11.py">課堂作業</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11 #總共的行數
space = "_"
center = n//2
#print(center)

for y in range(n):
    for x in range(n):
        print("(", x, ", ", y, ")", sep="")</pre>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/0f388f8554d98cefa381cccd74cbef51/raw/359e1c1b42048a6aedeacef7e53a9eccc80898ae/w11-2.py">課堂作業2</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

gs = 20

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

width = 11
height = 11

'''
ctx.lineWidth = 1
ctx.strokeStyle = 'lightgrey'
ctx.beginPath()
# ctx.rect(i*gs, j*gs, gs,gs)
ctx.rect(0, 0, 150, 100)
ctx.stroke()
'''

for i in range(width):
    for j in range(height):
        ctx.lineWidth = 1
        ctx.strokeStyle = 'lightgrey'
        ctx.beginPath() 
        ctx.rect(i * gs, j * gs, gs, gs)
        ctx.stroke() 
</pre>
<p></p>
<h3>w12_hw</h3>
<p><strong>第一題 input() print()</strong></p>
<p>1.<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/d8d83280950d4edd27a2aede013e0054/raw/dba91d549a462fa125a28476fe08a4922d8cde37/w12-1.py">你的名字和你來自哪裡</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("What's your name?")
input("Where are you from?")</pre>
<p></p>
<p>2.<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/a1e118e03e03be9d044ad00f0bfd871f/raw/e2c0edf32fcde7de37d9bb3ee4c701df0b657db7/w12-1-2.py">cat</a></p>
<p><span>說明：</span><span>print是打印的指令,如果用以下的執行出來會出現一隻小貓(brython執行會歪掉,所以有補償空格)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")</pre>
<p></p>
<p>第二題:變數</p>
<p>1.<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/2264d452a3aea24004dc0928dac42ae2/raw/b4952410110bdaac2d98fdafdb464704dcb6dd86/w12-2.py">你的名字 "前後"</a></p>
<p><span>說明：設定變數後,可以使用列印指令,列印出不同變數</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Yang"
last_name  = "Yong Shun"
print (first_name)
print (last_name)</pre>
<p></p>
<p>2.<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/b3f3d50c0db7d0ff2d624d7f217148f1/raw/01ef0f35b796a9d16ea0b17786dc735a1180ec7c/w12-2-2.py">你的名字和喜歡的食物</a></p>
<p><span>說明：使用input指令跳出詢問窗,再</span><span>使用回傳的數值與字串進行合併</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?")
favorite_food = input ("What is your favorite food?")
print ("Hi! My name is " + name)
print ("My favorite food is " + favorite_food) 
print (name + "'s favorite food is " + favorite_food)</pre>
<p></p>
<p>第三題:<em>if判斷式</em></p>
<p>1.<a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/e678450ba777ae5a1d30a34afa83740e/raw/e97bedcf5e18132113512a06d65d78cd299225d2/w12-3.py">你要買什麼書</a></p>
<p><span> 說明：使用if判斷式判斷使用者輸入之數值(文字)是否在字串當中</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"]
print (programming_books)
wanted_book = input("Hi! What book would you like to buy?")
print (wanted_book)
if wanted_book in programming_books:
    print ("Yes, we sell it!")
else:
    print ("Sorry, we don't sell that book")</pre>
<p><br/><span></span></p>
<p>第四題:<em>append()和remove()</em></p>
<p>1.<a href="https://gist.githubusercontent.com/41323242-042/5b5d41fe575042313d047e83a870e63c/raw/ef1f23c4bf9191251b7f57b1827a0759a3c7123e/w12-4.py">購物清單</a></p>
<p><span> 說明：使用append()進行加入接著使用remove()移除清單內無需購買之物品</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值

if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)

if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p style="text-align: left;">第五題:<em>index().pop()和insert()</em></p>
<p style="text-align: left;"><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/4daa4bfa28ceb343c2e0ebafd9a6220c/raw/addef5106cbfed14e6426dee783191e587f3bc31/w12-5.py">菜單</a></p>
<p><span>說明:index()用於從列表中找出某個述職的位置</span></p>
<p><span>       pop()用於將列標表中的元素移除(默認為最後一個)</span></p>
<p><span>       insert用於將字串插入</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] 
side_dish_index = todays_menu.index("salad") 
print (side_dish_index)
todays_menu.pop(side_dish_index) 
print (todays_menu) 
todays_menu.insert(side_dish_index, "fries") 
print (todays_menu) </pre>
<p style="text-align: left;">第六題:<em>切片取值</em></p>
<p style="text-align: left;"><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/203bb310c6ecaea5a6d29c0add4bc607/raw/9878825b749c5eca64907ecf3aff672be2aaba4e/w12-6.py">city</a></p>
<p><span>說明：</span><span>[star:end:step][起點:終點:步長]</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] 
print (cities) 
print (cities[1]) 
print (cities[1:4]) 
print (cities[1:4:2]) 
print (cities[0:3]) 
print (cities[:3]) 
print (cities[2:5]) 
print (cities[2:]) 
print (cities[0:5:2]) 
print (cities[::2]) 
print (cities[4])
print (cities[-1]) 
print (cities[-4:-1])
cities[3:0:-1] 
cities[-2:-5:-1] 
print (cities[::-1]) 
 </pre>
<p>第六題:<span>senses()、planets()、house()</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/34f938a9f57017b07047214904e9347c/raw/f0abcc45ed54e6cc5a7a4fda1dbdfe0cf4a2ddc2/w12-7.py">感官</a></p>
<p>說明:</p>
<p data-pm-slice="1 1 []">senses: 替換項目，結果：["sight", "smell", "hearing", "taste", "touch"]</p>
<p>planets: 加入和插入行星，結果：["Mercury", "Mars", "Venus", "Earth", "Neptune", "Jupiter", "Uranus", "Saturn"]</p>
<p>house: 刪除項目，最後刪除清單會報錯。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses)
senses[1] = "smell"
print (senses)
senses[3:5] = ["taste", "touch"]
print (senses)
senses[0:3:2] = ["sight", "hearing"]
print (senses)
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets)
planets = planets + ["Jupiter"]
print (planets)
planets = planets[0:2] + ["Venus"] + planets[2:5]
print (planets)
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets)
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house)
del house[1]
print (house)
del house[4:6]
print (house)
del house[::2]
print (house)
del house
print (house)</pre>
<p>第八題:<span>dishes()、for() </span></p>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/8258b7e77dd5b22797c9b8a89008de0e/raw/2cc331a7af0dd2e46aee6f60d86e4fa8966e033c/w12-8.py">朋友與他們喜歡的菜餚</a></p>
<p>說明:dishes 的部分會在每個循環中列出所有菜肴</p>
<p>       for 迴圈應該嵌套，以便顯示每個朋友對應的最愛菜肴。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">friends = ["Geetha", "Luca", "Daisy", "Juhan"]
dishes  = ["sushi", "burgers", "tacos", "pizza"]
print ("My friends' names are:")
print (friends)
for index in range (0,4):
    print ("index:  " + str(index))
    print ("friend: " + friends[index])
    print ("Their favorite dishes are:")
print (dishes)
for index in range (0,4):
    print ("index:  " + str(index))
    print ("dish: " + dishes[index])</pre>
<p>第九題:</p>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/c029b56cd5d1775d70255750a118c322/raw/dba9f2f9d4c1614e6cb54a76a886300e1bde1407/w12-9.py"> 尋找心儀的動物</a></p>
<p>說明:</p>
<p data-pm-slice="1 1 []">print()：顯示訊息</p>
<p>range()：生成數字範圍</p>
<p>len()：取得列表長度</p>
<p>if / else：條件判斷</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">animals = ["giraffe", "penguin", "dolphin"]
print (animals)
# for each position in the list
for i in range (0, len(animals)):
    print ("-- Beginning of loop --")
    # print each element and its position
    print ("The element in position " + str(i) + " is " + animals[i])
    wanted_to_see = "penguin"
    # for each position in the list
for i in range (0, len(animals)):
    # if the current animal is what you really wanted to see
    if animals[i] == wanted_to_see:
        # print out that that's the animal you really wanted to see
        print ("I saw a " + animals[i] + " and I really wanted to see it!")
    # if the current animal is not what you really wanted to see
    else:
        # just print out that you saw it
        print ("I saw a " + animals[i])</pre>
<p>第10題:</p>
<p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/9fe42eaac669d03ee6fa85f5dc6dc151/raw/d6312688e65d6954c0a1670fcd53f8dc161927b7/w12-10.py">配件列表遍歷與條件檢查</a></p>
<p>說明:<code>for</code> 迴圈用於遍歷列表中的每個元素，並對每個元素執行特定操作。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print (accessories)
# for each position in the list
for i in range (len(accessories)):
    #print each elements and its position
    print ("The element "  + accessories[i] + " is in position " + str(i))
    # for each position in the list
for i in range (len(accessories)): 
    # if the length of the element equals 6
    if len(accessories[i]) == 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
        # for each position in the list
for i in range (len(accessories)):
    # if the length of the element equals 6
    if len(accessories[i]) == 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
        # defining the threshold
n_of_characters = 6 
# for each position in the list 
for i in range (len(accessories)):
    # if the length of the element is greater than the threshold
    if len(accessories[i]) &gt; n_of_characters:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
        # defining the threshold
position = 2 
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is less then or equal to to the threshold
    if i &lt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
        # defining the threshold
position = 2 
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is greater then or equal to to the threshold
    if i &gt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position)) </pre>
<p></p>
<h3>w13_hw</h3><p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/605d31684d286a08eb54a9043ce8a860/raw/39fc2318357ba96edfb13c42383ccb1629543777/w13.py">一個紅色方框</a></p><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#紅色線畫正方形
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath() 
ctx.rect(0, 0, 200, 200)
ctx.stroke()</pre><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#紅色線畫正方形
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath() 
ctx.rect(0, 0, 200, 200)
ctx.stroke()</pre><p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/033399d33e5df4d0f204f3b9b670e05d/raw/66074aea494bba25b65ffd0d8c7460c1f5805414/w13-2.py">兩個紅色方框重疊</a></p><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 1  # 設定線條寬度
ctx.strokeStyle = 'red'  # 設定線條顏色為紅色
 
# 1. 原始正方形 (左上角在 (0, 0))
ctx.beginPath()
ctx.rect(0, 0, 200, 200)  # 原始正方形的大小
ctx.stroke()
 
# 設定變數
canvas_center_x = canvas.width // 2
canvas_center_y = canvas.height // 2
square_size = 200
 
# 2. 第二個正方形 (中心對齊)
first_top_left_x = canvas_center_x - square_size // 2
first_top_left_y = canvas_center_y - square_size // 2
 
ctx.beginPath()
ctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)
ctx.stroke()
 
# 3. 第三個正方形 (左上角在中心)
second_top_left_x = canvas_center_x - square_size // 2
second_top_left_y = canvas_center_y - square_size // 2
 
ctx.beginPath()</pre><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 1  # 設定線條寬度
ctx.strokeStyle = 'red'  # 設定線條顏色為紅色
 
# 1. 原始正方形 (左上角在 (0, 0))
ctx.beginPath()
ctx.rect(0, 0, 200, 200)  # 原始正方形的大小
ctx.stroke()
 
# 設定變數
canvas_center_x = canvas.width // 2
canvas_center_y = canvas.height // 2
square_size = 200
 
# 2. 第二個正方形 (中心對齊)
first_top_left_x = canvas_center_x - square_size // 2
first_top_left_y = canvas_center_y - square_size // 2
 
ctx.beginPath()
ctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)
ctx.stroke()
 
# 3. 第三個正方形 (左上角在中心)
second_top_left_x = canvas_center_x - square_size // 2
second_top_left_y = canvas_center_y - square_size // 2
 
ctx.beginPath()</pre><p><a href="https://mdecp2024.github.io/hw-41323242-042/content/Brython.html?src=https://gist.githubusercontent.com/41323242-042/afb0f913b15418a150bd115df6155d0a/raw/987861a8e4ac7fa991ff945f960a471e8e0e0524/w13.py">作業13</a></p><p></p><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# Create canvas element
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# Define circle centers and radius
x1, y1 = 200, 200  # Center of the first circle
x2, y2 = 300, 300  # Center of the second circle
radius = 141.4  # Radius of the circles

ctx = canvas.getContext("2d")

# Draw the first circle (fill color and border color)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightgoldenrodyellow"  # Fill color for the first circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # Border color for the first circle
ctx.stroke()

# Draw the second circle (fill color and border color)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightseagreen"  # Fill color for the second circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # Border color for the second circle
ctx.stroke()

# Fill the intersection area of the two circles
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # Set the clipping area to the first circle
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "skyblue"  # Color for the intersection
ctx.fill()
ctx.restore()

# Draw the first square (red border, purple fill)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "purple"  # Fill color for the first square
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "red"  # Border color for the first square
ctx.stroke()

# Draw the second square (red border, pink fill)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "pink"  # Fill color for the second square
ctx.fill()
ctx.stroke()

# Draw the borders of the circles (black border) separately
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # Set border line width
ctx.strokeStyle = "black"  # Border color for the first circle
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # Set border line width
ctx.strokeStyle = "black"  # Border color for the second circle
ctx.stroke()

# Now, draw the diagonal line on top and separately
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "blue"  # Diagonal line color
ctx.lineWidth = 2  # Set diagonal line width
ctx.stroke()
</pre><pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# Create canvas element
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# Define circle centers and radius
x1, y1 = 200, 200  # Center of the first circle
x2, y2 = 300, 300  # Center of the second circle
radius = 141.4  # Radius of the circles

ctx = canvas.getContext("2d")

# Draw the first circle (fill color and border color)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightgoldenrodyellow"  # Fill color for the first circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # Border color for the first circle
ctx.stroke()

# Draw the second circle (fill color and border color)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightseagreen"  # Fill color for the second circle
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "black"  # Border color for the second circle
ctx.stroke()

# Fill the intersection area of the two circles
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # Set the clipping area to the first circle
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "skyblue"  # Color for the intersection
ctx.fill()
ctx.restore()

# Draw the first square (red border, purple fill)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "purple"  # Fill color for the first square
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "red"  # Border color for the first square
ctx.stroke()

# Draw the second square (red border, pink fill)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "pink"  # Fill color for the second square
ctx.fill()
ctx.stroke()

# Draw the borders of the circles (black border) separately
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # Set border line width
ctx.strokeStyle = "black"  # Border color for the first circle
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.lineWidth = 3  # Set border line width
ctx.strokeStyle = "black"  # Border color for the second circle
ctx.stroke()

# Now, draw the diagonal line on top and separately
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "blue"  # Diagonal line color
ctx.lineWidth = 2  # Set diagonal line width
ctx.stroke()
</pre><p>ㄒ</p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><br/><br/><br/> <br/>  </p>
<p></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w6</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1,5):
    print(i)
def print_star_pyramid(rows):
    for i in range(rows):
        # 打印空格
        print(' ' * (rows - i - 1), end='')
        # 打印星星
        print('*' * (2 * i + 1))
 
# 設定金字塔的行數
rows = 5
print_star_pyramid(rows)
def print_number_pyramid(rows):
    for i in range(rows):
        # 打印空格
        print(' ' * (rows - i - 1), end='')
        # 打印數字
        print(str(i + 1) * (2 * i + 1))
 
        </pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    *
   ***
  *****
 *******
*********
</pre>
<p><br/><br/></p>
<h3>w8</h3>
<p><img alt="" height="314" src="/images/螢幕擷取畫面 2024-10-16 122110.png" width="574"/></p>
<p><img alt="" height="330" src="/images/螢幕擷取畫面 2024-10-16 120959.png" width="585"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('120.113.99.54', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()

# 設定立方體的尺寸和初始位置
cube_size = 0.2  # 20 cm
spacing = 0.5  # 50 cm 之間的距離（可根據需求調整）

# 擺放立方體的行數和每行的數量
rows = 5  # 從第 1 行到第 5 行
cubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量

# 在正的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = row * spacing  # 垂直方向上每行間距
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 在負的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = -row * spacing  # 負的 Y 方向
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 完成立方體的擺放
print("立方體已成功擺放!")

# 設定主迴圈
while True:
    # 在這裡可以進行其他模擬操作
    time.sleep(0.1)  # 確保循環不會過快

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()
</pre>
<p><span>盧棱講過，偉大的人是絕不會濫用自己的優點的，他們看出自己越過別人的地方，並且意識到這一點，然而絕不會因此就不謙虛。他會這麼說是有理由的。需要考慮周詳學習python的影響及因應對策。培根講過一句值得人反覆尋思的話，尊重人民，也就會受到人民的尊重。這句話語雖然很短，但令我浮想聯翩。</span></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p>   </p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>